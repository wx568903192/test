<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context.xsd
	 http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx.xsd
	 http://www.springframework.org/schema/aop
	 http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 以前只学习MyBaits的时候是如何创建出所需要的SqlSession对象 -->
	<!-- 利用SqlSessionFactoryBuilder对象的build() 方法创建出SqlSessionFactory 再利用SqlSessionFactory对象的createSession()/openSession() 
		打开获取到SqlSession对象 -->
	<!-- 在Spring与MyBaits整合的时候， 关于数据源以及数据库连接等相关的Bean都由Spring容器来管理配置 也就意味着MyBaits配置文件中就不需要再配置了 -->
	<!-- 1.配置数据连接池Bean -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>
	
	2.配置SqlSessionFactoryBean
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		设置MyBatis核心配置文件的路径，以及MyBatis中的sql映射文件的路径
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:dao/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	3.配置SqlSession
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<property name="sqlSessionFactory"  ref="sqlSessionFactory" />
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
	<!-- 配置数据源 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="Location">
			<value>classpath:database.properties</value>
		</property>
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<!-- 配置sqlsessiontemplate -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean> -->
	<!-- 4.配置Dao组件 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		dao依赖SqlSessioinTemplate
		<property name="sqlSession" ref="sqlSession" />
		<property name="mapperInterface" value="dao.UserMapper"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	 -->
	<!-- 5.配置Service组件 -->
	<!-- <bean id="userSer" class="service.UserServiceImpl">
		<property name="userMapper" ref="userMapper" />
	</bean> -->
	<!-- 扫描dao包，创建bean组件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao"></property>
	</bean>
	<!-- 扫描service包 -->
	<context:component-scan base-package="service"></context:component-scan>
	<!-- 事务管理器 -->
	<bean id="txManager" 
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>
</beans>